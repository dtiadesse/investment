<template>
  <div :class="{ 'tableFixHead': enableScroll, 'limit-height': limitHeight }">
    <table v-if="data && data.length" aria-multiselectable="true"
      class="slds-table slds-table_bordered slds-table_fixed-layout slds-table_resizable-cols" role="grid"
      aria-label="Example advanced table of Opportunities in actionable mode">
      <thead>
        <tr class="slds-line-height_reset">
          <template v-for="col of columns">
            <th v-if="col.name === 'Id'" class="slds-text-align_right slds-cell_action-mode" scope="col"
              style="width:3.25rem">
              <span id="column-group-header" class="slds-assistive-text">Choose a row</span>
              <div class="slds-th__action slds-th__action_form">
                <div v-if="selectType === 'multiple'" class="slds-checkbox">
                  <input type="checkbox" name="options" id="checkbox-all" value="all" tabindex="0"
                    aria-labelledby="check-select-all-label column-group-header" />
                  <label class="slds-checkbox__label" for="checkbox-all" id="check-select-all-label">
                    <span class="slds-checkbox_faux"></span>
                    <span class="slds-form-element__label slds-assistive-text">Select All</span>
                  </label>
                </div>
              </div>
            </th>


            <th v-else aria-sort="none" class="slds-is-resizable slds-is-sortable slds-cell_action-mode" scope="col">
              <a class="slds-th__action slds-text-link_reset" href="#" role="button" tabindex="0">
                <span class="slds-assistive-text">Sort by: </span>
                <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                  <span class="slds-truncate" title="Name">{{ col.label }}</span>
                  <span class="slds-icon_container slds-icon-utility-arrowdown">
                    <svg class="slds-icon slds-icon-text-default slds-is-sortable__icon " aria-hidden="true">
                      <use xlink:href="/assets/icons/utility-sprite/svg/symbols.svg#arrowdown"></use>
                    </svg>
                  </span>
                </div>
              </a>
              <div class="slds-resizable">
                <input type="range" aria-label="Name column width" class="slds-resizable__input slds-assistive-text"
                  id="cell-resize-handle-15" max="1000" min="20" tabindex="0" />
                <span class="slds-resizable__handle">
                  <!-- <span class="slds-resizable__divider"></span> -->
                </span>
              </div>
            </th>
          </template>
          <th v-if="showAction" class="slds-cell_action-mode" scope="col" style="width:3.25rem">
            <div class="slds-truncate slds-assistive-text" title="Actions">Actions</div>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="row in data" aria-selected="false" class="slds-hint-parent">
          <template v-for="col of columns">
            <td v-if="col.name === 'Id'" class="slds-text-align_right slds-cell_action-mode" role="gridcell">
              <div v-if="selectType === 'single'" class="slds-checkbox radio-custom">
                <input v-model="selectedValues" type="radio" name="singleOption" :id="'radio' + row.Id" :value="row.Id"
                  tabindex="0" aria-labelledby="" />
              </div>

              <div v-if="selectType === 'multiple'" class="slds-checkbox">
                <input v-model="selectedValues" type="checkbox" name="multipleOptions[]" :id="'checkbox' + row.Id"
                  :value="row.Id" tabindex="0" aria-labelledby="check-button-label-01 column-group-header" />
                <label class="slds-checkbox__label" :for="'checkbox' + row.Id" id="check-button-label">
                  <span class="slds-checkbox_faux"></span>
                  <span class="slds-form-element__label slds-assistive-text">Select</span>
                </label>
              </div>

            </td>
            <th v-else class="slds-cell_action-mode" scope="row">
              <div class="slds-truncate" :title="row[col]">
                <NuxtLink v-if="col.type === 'Url'" :to="{ name: 'property-id', params: { id: row['Id'] } }">{{
                  row[col.name] }}</NuxtLink>
                <span v-else>{{ row[col.name] }}</span>
              </div>
            </th>

          </template>

          <td v-if="showAction" class="slds-cell_action-mode" role="gridcell">
            <div class="slds-dropdown-trigger slds-dropdown-trigger_click"
              :class="{ 'slds-is-open': row['show-menu'] === true }">
              <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small"
                aria-haspopup="true" aria-expanded="true" title="Show More"
                @click="row['show-menu'] = !row['show-menu']">
                <svg class="slds-button__icon" aria-hidden="true">
                  <use xlink:href="/assets/icons/utility-sprite/svg/symbols.svg#down"></use>
                </svg>
                <span class="slds-assistive-text">Show More</span>
              </button>
              <div class="slds-dropdown slds-dropdown_right">
                <ul class="slds-dropdown__list" role="menu" aria-label="Show More">
                  <li class="slds-dropdown__item" role="presentation">
                    <a href="#" role="menuitem" tabindex="0">
                      <span class="slds-truncate" title="Menu Item One">View</span>
                    </a>
                  </li>
                  <li class="slds-dropdown__item" role="presentation">
                    <a href="#" role="menuitem" tabindex="-1">
                      <span class="slds-truncate" title="Menu Item Two">Delete</span>
                    </a>
                  </li>

                </ul>
              </div>
            </div>

          </td>
        </tr>

      </tbody>
    </table>
  </div>
  <Loader v-if="isLoading" />
</template>

<script lang="ts" setup>
import Loader from './Loader.vue';

const { columns, data, isLoading, enableScroll = false, limitHeight = false, showAction = true, selectType = 'multiple' } = defineProps(['columns', 'data', 'isLoading', 'enableScroll', 'limitHeight', 'showAction', 'selectType'])

const selectedValues = ref([]);

const emit = defineEmits(['itemsSelected']);

watch(selectedValues, async (newVal, oldVal) => {
  emit('itemsSelected', newVal);
})

</script>

<style scoped>
.tableFixHead {
  /* max-height: 20rem; */
  overflow-y: auto;
}

.limit-height {
  max-height: 8rem !important;
}

.radio-custom {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}
</style>


